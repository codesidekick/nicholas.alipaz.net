<?php

// $Id: ServicesEndpointTests.test,v 1.1.2.3 2010/12/15 02:33:17 ocyrus Exp $

/**
 * @file
 * Call the endpoint tests when no authentication is being used.
 *
 */

require_once('ServicesWebTestCase.php') ;
/**
 * Run test cases for the endpoint with no authentication turned on.
 *
 */
 class ServicesEndpointTests extends ServicesWebTestCase {

	/**
    * Implementation of setUp().
    */
   public function setUp() {
     parent::setUp(
      'autoload',
     	'ctools',
     	'services',
      'rest_server',
      'services_sessauth',
      'inputstream'
     );
   }
   /**
    * Test adding an endpoint succeeds.
    */
   public function testEndpointForm() {
     // Create and log in our privileged user.
     $this->privilegedUser = $this->drupalCreateUser(array(
         'administer services',
     ));
     $this->drupalLogin($this->privilegedUser);

     $edit = $this->populateEndpointFAPI() ;
     $this->drupalPost('admin/build/services/add', $edit, t('Save and proceed'));
     $this->drupalGet($edit['path']);
   }

  /**
    * testing node_resource Index
    */
   public function testNewEndpointResourceNodeIndex() {
    // Create and log in our privileged user.
    $this->privilegedUser = $this->drupalCreateUser(array(
       'administer services',
    ));
    $this->drupalLogin($this->privilegedUser);
    $endpoint =  $this->saveNewEndpoint();
    $node = $this->drupalCreateNode();
    $responseArray = $this->servicesGet($endpoint->path.'/node');
    $nodeResourceIndex = json_decode($responseArray['body']);
    if($node->title == $nodeResourceIndex[0]->title) {
      $this->pass('Successfully received Node info', 'NodeResource: Index');
    } else {
      $this->fail(t('Something went wrong. StatusCode: !status', array('!status' => $responseArray['status'])), 'NodeResource: Index');
    }
   }
  /**
    * testing node_resource Get
    */
   public function testNewEndpointResourceNodeGet() {
     // Create and log in our privileged user.
     $this->privilegedUser = $this->drupalCreateUser(array(
         'administer services',
     ));
     $this->drupalLogin($this->privilegedUser);
    $endpoint =  $this->saveNewEndpoint();
    $node = $this->drupalCreateNode();
    $responseArray = $this->servicesGet($endpoint->path.'/node/'. $node->nid);
    $nodeResourceGet = json_decode($responseArray['body']);
    if($node->title == $nodeResourceGet->title) {
      $this->pass('Successfully received Node info', 'NodeResource: Retrieve');
    } else {
      $this->fail(t('Something went wrong. StatusCode: !status', array('!status' => $responseArray['status'])), 'NodeResource: Retrieve');
    }
    //Verify node not Found
    unset($node);
    $responseArray = $this->servicesGet($endpoint->path.'/node/99');
    if($responseArray['code'] == '404') {
      $this->pass('Successfully was rejected to non existent node', 'NodeResource: Retrieve');
    } else {
      $this->pass('I didnt get rejected, bad news!', 'NodeResource: Retrieve');
    }
   }
  /**
    * testing node_resource Create
    */
   public function testEndpointResourceNodeCreate() {
    // Create and log in our privileged user.
    $this->privilegedUser = $this->drupalCreateUser(array(
       'administer services',
       'administer nodes',
    ));
    $this->drupalLogin($this->privilegedUser);
    $endpoint =  $this->saveNewEndpoint();
    $node = array(
      'node[title]' => 'testing',
      'node[body]' => 'bodytest',
      'node[type]' => 'story',
      'node[name]' => $this->privilegedUser->name,
    );
    
    $data = $this->services_build_postfields($node);
    $responseArray = $this->servicesPost($endpoint->path.'/node', $data, array('Accept: application/json'));
    $nodeResourceCreateReturn = json_decode($responseArray['body']);
    
    if(isset($nodeResourceCreateReturn->nid)) {
      $this->pass('Node was successfully created',  'NodeResource: Create');
      $newNode = node_load($nodeResourceCreateReturn->nid);
      if($newNode->title = $node['node[title]']) {
        $this->pass('Title was the same',  'NodeResource: Create');
      } else {
        $this->fail('Title was different', 'NodeResource: Create');
      }
      if($newNode->body = $node['node[body]']) {
        $this->pass('Body was the same', 'NodeResource: Create');
      } else {
        $this->fail('Body was different', 'NodeResource: Create');
      }
    } else {
      $this->fail(t('Creating the node failed. StatusCode: !status', array('!status' => $responseArray['status'])), 'NodeResource: Create');
    }
  }
  /**
    * testing node_resource Created make ure it fails with no perms
    */
   public function testEndpointResourceNodeCreateFail() {
    // Create and log in our privileged user.
    $this->privilegedUser = $this->drupalCreateUser(array(
       'administer services',
    ));
    $this->drupalLogin($this->privilegedUser);
    $endpoint =  $this->saveNewEndpoint();
    $node = array(
      'node[title]' => 'testing',
      'node[body]' => 'bodytest',
      'node[type]' => 'story',
      'node[name]' => $this->privilegedUser->name,
    );
    
    $data = $this->services_build_postfields($node);
    $responseArray = $this->servicesPost($endpoint->path.'/node', $data, array('Accept: application/json'));
    $nodeResourceCreateReturn = json_decode($responseArray['body']);
    
    if($responseArray['code'] = 401) {
      $this->pass('User with permissions cannot create node',  'NodeResource: Create');
    } else {
      $this->fail(t('User was able to create nodes without permission. StatusCode: !status', array('!status' => $responseArray['status'])), 'NodeResource: Create');
    }
  }
  /**
    * testing node_resource Validate missing Title
    */
   public function testEndpointResourceNodeCreateMissingTitle() {
    // Create and log in our privileged user.
    $this->privilegedUser = $this->drupalCreateUser(array(
       'administer services',
       'administer nodes',
    ));
    $this->drupalLogin($this->privilegedUser);
    $endpoint =  $this->saveNewEndpoint();
    $node = $this->drupalCreateNode();
    $node_update = array(
      'node[title]' => '',
      'node[body]' => 'bodytest',
      'node[name]' => $this->privilegedUser->name,
      'node[type]' => 'story',
    );
    
    $data = $this->services_build_postfields($node_update);
    $responseArray = $this->servicesPost($endpoint->path.'/node', $data, array('Accept: application/json'));
    $nodeResourceUpdateReturn = json_decode($responseArray['body']);
    $nodeAfterUpdate = node_load($nodeResourceUpdateReturn);
    if(strpos($responseArray['status'], 'Title field is required.')) {
      $this->pass('Node was not created, no title. ', 'NodeResource: Created');
    }
  }
  /**
    * testing node_resource Update
    */
   public function testEndpointResourceNodeUpdate() {
    // Create and log in our privileged user.
    $this->privilegedUser = $this->drupalCreateUser(array(
       'administer services',
       'administer nodes',
    ));
    $this->drupalLogin($this->privilegedUser);
    $endpoint =  $this->saveNewEndpoint();
    $node = $this->drupalCreateNode();
    $node_update = array(
      'node[title]' => 'testing',
      'node[body]' => 'bodytest',
      'node[type]' => 'story',
      'node[name]' => $this->privilegedUser->name,
    );
    
    $data = $this->services_build_postfields($node_update);
    $responseArray = $this->servicesPut($endpoint->path.'/node/'.$node->nid, $data, array('Accept: application/json'));
    $nodeResourceUpdateReturn = json_decode($responseArray['body']);
    $nodeAfterUpdate = node_load($nodeResourceUpdateReturn);
    if(isset($nodeAfterUpdate->nid)) {
      $this->pass('Node was successfully updated',  'NodeResource: Updated');
      if($nodeAfterUpdate->title = $node_update['node[title]']) {
        $this->pass('Title was the same',  'NodeResource: Update');
      } else {
        $this->fail('Title was different', 'NodeResource: Update');
      }
      if($nodeAfterUpdate->body = $node_update['node[body]']) {
        $this->pass('Body was the same', 'NodeResource: Update');
      } else {
        $this->fail('Body was different', 'NodeResource: Update');
      }
    } else {
      $this->fail(t('Updating the node failed. StatusCode: !status', array('!status' => $responseArray['status'])), 'NodeResource: Update');
    }
  }
  /**
    * testing node_resource Update fail with no permissions
    */
   public function testEndpointResourceNodeUpdatePermFail() {
    // Create and log in our privileged user.
    $this->privilegedUser = $this->drupalCreateUser(array(
       'administer services',
       'create story content',
       'edit own story content',
    ));
    $this->drupalLogin($this->privilegedUser);
    $endpoint =  $this->saveNewEndpoint();
    $node = $this->drupalCreateNode(array('uid' => 1));
    $node_update = array(
      'node[title]' => 'testing',
      'node[body]' => 'bodytest',
      'node[type]' => 'story',
    );
    
    $data = $this->services_build_postfields($node_update);
    $responseArray = $this->servicesPut($endpoint->path.'/node/'.$node->nid, $data, array('Accept: application/json'));
    $nodeResourceUpdateReturn = json_decode($responseArray['body']);
    $nodeAfterUpdate = node_load($nodeResourceUpdateReturn);
    if(isset($nodeAfterUpdate->nid)) {
      $this->fail(t('Updating the node failed. StatusCode: !status', array('!status' => $responseArray['status'])), 'NodeResource: Update');
    } else {
      $this->pass(t('Updating the node failed. This is good!'), 'NodeResource: Update');
    }
  }
  /**
    * testing node_resource Update verify missing title
    */
   public function testEndpointResourceNodeUpdateMissingTitle() {
    // Create and log in our privileged user.
    $this->privilegedUser = $this->drupalCreateUser(array(
       'administer services',
       'administer nodes',
    ));
    $this->drupalLogin($this->privilegedUser);
    $endpoint =  $this->saveNewEndpoint();
    $node = $this->drupalCreateNode();
    $node_update = array(
      'node[title]' => '',
      'node[body]' => 'bodytest',
      'node[name]' => $this->privilegedUser->name,
    );
    
    $data = $this->services_build_postfields($node_update);
    $responseArray = $this->servicesPut($endpoint->path.'/node/'.$node->nid, $data, array('Accept: application/json'));
    $nodeResourceUpdateReturn = json_decode($responseArray['body']);
    $nodeAfterUpdate = node_load($nodeResourceUpdateReturn);
    if(strpos($responseArray['status'], 'Title field is required.')) {
      $this->pass('Node was not created, no title. ', 'NodeResource: Update');
    }
  }
  /**
    * testing node_resource Delete
    */
   public function testEndpointResourceNodeDelete() {
    // Create and log in our privileged user.
    $this->privilegedUser = $this->drupalCreateUser(array(
       'administer services',
       'administer nodes',
    ));
    $this->drupalLogin($this->privilegedUser);
    $endpoint =  $this->saveNewEndpoint();
    $node = $this->drupalCreateNode();
    $data = '';
    $responseArray = $this->servicesDelete($endpoint->path.'/node/'.$node->nid, $data, array('Accept: application/json'));
    $nodeResourceUpdateReturn = json_decode($responseArray['body']);
    if($responseArray['code'] == 200) {
      $this->pass('Node was deleted.', 'NodeResource: Deleted');
    } else {
      $this->fail(t('Deleting the node failed. StatusCode: !status', array('!status' => $responseArray['status'])), 'NodeResource: Delete');
    }
    $responseArray = $this->servicesDelete($endpoint->path.'/node/'.$node->nid, $data, array('Accept: application/json'));
    $nodeResourceUpdateReturn = json_decode($responseArray['body']);
    if($responseArray['code'] == 200) {
      $this->fail('Node was deleted. It shoudlnt have been because it doesnt exist', 'NodeResource: Deleted');
    } else {
      $this->pass(t('Was not abled to delete node because it doesnt exist. StatusCode: !status', array('!status' => $responseArray['status'])), 'NodeResource: Delete');
    }
  }
   /**
    * Test adding an endpoint succeeds.
    */
   public function testSuccessfulAddEndpoint() {
     $edit = $this->populateEndpointFAPI() ;
    // Create and log in our privileged user.
    $this->privilegedUser = $this->drupalCreateUser(array(
       'administer services',
       'administer nodes',
    ));
    $this->drupalLogin($this->privilegedUser);
     $this->drupalPost('admin/build/services/add', $edit, t('Save and proceed')) ;
     $this->assertResponse('200', t('expected 200'));
     $this->drupalGet('admin/build/services/list') ;
     $this->assertResponse('200',t('expected 200'));

     $this->assertText($edit['title'], t('Endpoint path appears')) ;
     $this->assertText('rest_server', t('Server is rest server')) ;
     $this->assertText('In database', t('Storage is in database')) ;
   }

   /**
    * Test missing path to endpoint causes an error.
    */
   public function testMissingPath() {
     $edit = $this->populateEndpointFAPI() ;
     unset($edit['path']) ;
    // Create and log in our privileged user.
    $this->privilegedUser = $this->drupalCreateUser(array(
       'administer services',
       'administer nodes',
    ));
    $this->drupalLogin($this->privilegedUser);
     $this->drupalPost('admin/build/services/add', $edit, t('Save and proceed')) ;
     $this->assertResponse('200', 'expected 200');

     $this->assertText('Path to endpoint field is required.',
       t('Endpoint path missing error message.')) ;
     $this->assertFieldByName('title', $edit['title'],
       t('Title field remains.')) ;
     $this->assertFieldByName('server', 'rest_server',
       t('Server is rest server')) ;
     $this->assertFieldChecked('edit-services-use-content-permissions',
       t('Storage use content permission is checked.')) ;
   }

   /**
    * Test missing title for endpoint causes an error.
    */
   public function testMissingTitle() {
     $edit = $this->populateEndpointFAPI() ;
     unset($edit['title']) ;
    // Create and log in our privileged user.
    $this->privilegedUser = $this->drupalCreateUser(array(
       'administer services',
       'administer nodes',
    ));
    $this->drupalLogin($this->privilegedUser);
     $this->drupalPost('admin/build/services/add', $edit, t('Save and proceed')) ;
     $this->assertResponse('200', 'expected 200');

     $this->assertText('Endpoint title field is required.',
       t('Endpoint title missing error message.')) ;
     $this->assertFieldByName('name', $edit['name'],
       t('Name field remains.')) ;
     $this->assertFieldByName('server', 'rest_server',
       t('Server is rest server')) ;
     $this->assertFieldChecked('edit-services-use-content-permissions',
       t('Storage use content permission is checked.')) ;
   }

   /**
    * Test missing server for endpoint causes an error.
    */
   public function testMissingServer() {
     $edit = $this->populateEndpointFAPI() ;
     unset($edit['server']) ;
    // Create and log in our privileged user.
    $this->privilegedUser = $this->drupalCreateUser(array(
       'administer services',
       'administer nodes',
    ));
    $this->drupalLogin($this->privilegedUser);
     $this->drupalPost('admin/build/services/add', $edit,
       t('Save and proceed')) ;
     $this->assertResponse('200', 'expected 200');

     $this->assertText('Server field is required.',
       t('Server missing error message.')) ;
     $this->assertFieldByName('name', $edit['name'],
       t('Name field remains.')) ;
     $this->assertFieldByName('title', $edit['title'],
       t('Title field remains.')) ;
     $this->assertFieldChecked('edit-services-use-content-permissions',
       t('Storage use content permission is checked.')) ;
   }

   /*
    ------------------------------------
    HELPER METHODS
    ------------------------------------
   */

   /**
    * Creates a data array for populating an endpoint creation form.
    *
    * @return
    * An array of fields for fully populating an endpoint creation form.
    */
   public function populateEndpointFAPI() {
     return array(
       'name'   => 'mchnname',
       'title'  => $this->randomName(20),
       'path'   => $this->randomName(10),
       'server' => 'rest_server',
       'services_use_content_permissions' => TRUE,
     ) ;
   }

   public function saveNewEndpoint() {
    $edit = $this->populateEndpointFAPI() ;
    $endpoint = new stdClass;
    $endpoint->disabled = FALSE; /* Edit this to true to make a default endpoint disabled initially */
    $endpoint->api_version = 3;
    $endpoint->name = $edit['name'];
    $endpoint->title = $edit['title'];
    $endpoint->server = $edit['server'];
    $endpoint->path = $edit['path'];
    $endpoint->authentication = array(
      'services_sessauth' => array(),
    );
    $endpoint->resources = array(
      'node' => array(
        'alias' => '',
        'operations' => array(
          'create' => array(
            'enabled' => 1,
          ),
          'retrieve' => array(
            'enabled' => 1,
          ),
          'update' => array(
            'enabled' => 1,
          ),
          'delete' => array(
            'enabled' => 1,
          ),
          'index' => array(
            'enabled' => 1,
          ),
        ),
      ),
      'system' => array(
        'alias' => '',
        'actions' => array(
          'connect' => array(
            'enabled' => 1,
          ),
          'get_variable' => array(
            'enabled' => 1,
          ),
          'set_variable' => array(
            'enabled' => 1,
          ),
        ),
      ),
      'taxonomy_term' => array(
        'alias' => '',
        'operations' => array(
          'create' => array(
            'enabled' => 1,
          ),
          'retrieve' => array(
            'enabled' => 1,
          ),
          'update' => array(
            'enabled' => 1,
          ),
          'delete' => array(
            'enabled' => 1,
          ),
        ),
        'actions' => array(
          'selectNodes' => array(
            'enabled' => 1,
          ),
        ),
      ),
      'taxonomy_vocabulary' => array(
        'alias' => '',
        'operations' => array(
          'create' => array(
            'enabled' => 1,
          ),
          'retrieve' => array(
            'enabled' => 1,
          ),
          'update' => array(
            'enabled' => 1,
          ),
          'delete' => array(
            'enabled' => 1,
          ),
        ),
        'actions' => array(
          'getTree' => array(
            'enabled' => 1,
          ),
        ),
      ),
      'user' => array(
        'alias' => '',
        'operations' => array(
          'create' => array(
            'enabled' => 1,
          ),
          'retrieve' => array(
            'enabled' => 1,
          ),
          'update' => array(
            'enabled' => 1,
          ),
          'delete' => array(
            'enabled' => 1,
          ),
          'index' => array(
            'enabled' => 1,
          ),
        ),
        'actions' => array(
          'login' => array(
            'enabled' => 1,
          ),
          'logout' => array(
            'enabled' => 1,
          ),
        ),
      ),
      'comment' => array(
        'alias' => '',
        'operations' => array(
          'create' => array(
            'enabled' => 1,
          ),
          'retrieve' => array(
            'enabled' => 1,
          ),
          'update' => array(
            'enabled' => 1,
          ),
          'delete' => array(
            'enabled' => 1,
          ),
        ),
        'actions' => array(
          'loadNodeComments' => array(
            'enabled' => 1,
          ),
          'countAll' => array(
            'enabled' => 1,
          ),
          'countNew' => array(
            'enabled' => 1,
          ),
        ),
      ),
      'file' => array(
        'alias' => '',
        'operations' => array(
          'create' => array(
            'enabled' => 1,
          ),
          'retrieve' => array(
            'enabled' => 1,
          ),
          'delete' => array(
            'enabled' => 1,
          ),
        ),
        'actions' => array(
          'nodeFiles' => array(
            'enabled' => 1,
          ),
        ),
      ),
      'echo' => array(
        'alias' => '',
        'operations' => array(
          'index' => array(
            'enabled' => 1,
          ),
        ),
      ),
    );
    $endpoint->debug = 1;
    $endpoint->status = 1;
    services_endpoint_save($endpoint);
    $endpoint = services_endpoint_load($endpoint->name);
    if($endpoint->name == $edit['name']) {
      $this->pass('Endpoint successfully created');  
    } else {
       $this->fail('Endpoint creation failed');  
    }
     $this->servicesGet($endpoint->path);
     return $endpoint;
   }
 /**
 * Builds out our post fields
 *
 */
  private function services_build_postfields($data = array()) {
    $post_data = '';  
    if (is_array($data) && !empty($data)) {
      array_walk($data, array($this, 'services_flatten_fields'));
      $post_data = implode('&', $data);
    }
    if(is_object($data) && !empty($data)) {
      array_walk(get_object_vars($data), array($this, 'services_flatten_fields'));
      $post_data = implode('&', $data);
    }
    return $post_data;
  }
/**
 * Modifies our array data so we can turn it into a querystring
 * 
 * @param string $item - array value
 * @param string $key  - key of the array element
 */
  private function services_flatten_fields(&$item, $key) {
    $item = $key .'='. $item;
  }
}